type _Schema_
  @fulltext(
    name: "searchSongs"
    language: en
    algorithm: rank
    include: [{ entity: "Song", fields: [{ name: "name" }, { name: "symbol" }] }]
  )

type Song @entity {
  id: ID!
  """
  Address of the song.
  """
  address: Bytes!
  """
  Deployer of the contract.
  """
  owner: Bytes!
  """
  Base URI for the tokenId.
  """
  baseURI: String!
  """
  Contract URI for OpenSea storefront.
  """
  contractURI: String!
  """
  Name of the collection.
  """
  name: String!
  """
  Symbol of the collection.
  """
  symbol: String!
  """
  Address that receives primary and secondary royalties.
  """
  fundingRecipient: Bytes! # address
  """
  Address of metadata module.
  """
  metadataModule: Bytes # address(0x00) if not used.
  """
  The royalty BPS (basis points).
  """
  royaltyBPS: Int!

  """
  Minters associated with the song.
  """
  minters: [Minter!] @derivedFrom(field: "edition")
}

type Minter @entity {
  id: ID!
  """
  Address of the minter.
  """
  address: Bytes!
  """
  Mint ID associated with the minter.
  """
  mintId: BigInt!
  """
  Start timestamp of sale (in seconds since unix epoch).
  """
  startTime: Int!
  """
  End timestamp of sale (in seconds since unix epoch).
  """
  endTime: Int!
  """
  The affiliate fee in basis points.
  """
  affiliateFeeBPS: Int!
  """
  Sale price in ETH for minting a single token.
  """
  price: BigInt!
  """
  Song edition mint config is associated with.
  """
  edition: Song!
}
