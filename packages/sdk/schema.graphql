schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"""
Ethereum address
"""
scalar Address

"""
Artist Entity
"""
type Artist implements Node {
  """
  Artist contract address (public address)
  """
  artistContractAddress: String
  """
  Banner image of artist page
  """
  bannerImage: Media
  """
  Paginated collectors of artist.
  """
  collectors(
    """
    Pagination parameters
    """
    pagination: CursorConnectionArgs! = { first: 10, sort: ASC }
  ): ArtistCollectorConnection!
  """
  Contract artist id (acumulative unique id)
  """
  contractArtistId: String
  """
  Creation date of artist entity
  """
  createdAt: DateTime!
  """
  Gem Collection URL
  """
  gemCollectionUrl: String
  """
  Artist identifier
  """
  id: ID!
  """
  Invite limit
  """
  inviteLimit: Int!
  """
  Paginated minted releases of artist.
  """
  mintedReleasesPaginated(
    """
    Filter the artist releases
    """
    filter: ArtistMintedReleasesFilter! = { appearsOn: false, hasCreditSplits: false, sounds: true }
    """
    Pagination parameters
    """
    pagination: CursorConnectionArgs! = { first: 10, sort: DESC }
  ): ReleaseConnection!
  """
  Name of artist
  """
  name: String
  """
  Number of unique nft collectors of artist
  """
  numCollectors: Int!
  """
  How many minted releases for artist
  """
  numMintedReleases(
    """
    Filter the releases to be counted
    """
    filter: ArtistMintedReleasesFilter! = { appearsOn: false, hasCreditSplits: false, sounds: true }
  ): Int!
  """
  OpenSea Collection URL
  """
  openseaCollectionUrl: String
  """
  Genres of artist releases, with the most common genres first
  """
  releasesGenres: [String!]!
  """
  Season associated with artist
  """
  season: String
  """
  Sound handle to be used on URLs
  """
  soundHandle: String
  """
  Spotify URL
  """
  spotifyUrl: String
  """
  Token symbol of contract
  """
  tokenSymbol: String
  """
  User entity of artist
  """
  user: User!
}

"""
ArtistCollector
"""
type ArtistCollector implements Node {
  """
  Amount of artist nfts owned
  """
  artistNftsOwned: Int!
  """
  First artist nft collected by user
  """
  firstNftCollected: Nft
  """
  Id of first artist nft collected by user
  """
  id: ID!
  """
  Collector user
  """
  user: User!
}

"""
Paginated connection of Artist Collectors
"""
type ArtistCollectorConnection implements Connection {
  """
  Edges of current page
  """
  edges: [ArtistCollectorConnectionEdge!]!
  """
  Pagination helpers information
  """
  pageInfo: PageInfo!
}

"""
Edge of Artist Collector Connection
"""
type ArtistCollectorConnectionEdge implements Edge {
  """
  Cursor to be used for pagination
  """
  cursor: String!
  """
  ArtistCollector node
  """
  node: ArtistCollector!
}

"""
Artist Collectors wrapper entity
"""
type ArtistCollectors {
  """
  Artist entity
  """
  artist: Artist!
  """
  Nft collectors of artist
  """
  collectors: UserConnection!
}

"""
Input for artistCollectors query
"""
input ArtistCollectorsInput {
  """
  Artist unique identifier
  """
  artistId: UUID!
  """
  Cursor connection paramaters
  """
  pagination: UserCursorConnectionArgs! = { after: null, first: 20, sort: ASC }
}

"""
Paginated connection of Artists
"""
type ArtistConnection implements Connection {
  """
  Edges of current page
  """
  edges: [ArtistConnectionEdge!]!
  """
  Pagination helpers information
  """
  pageInfo: PageInfo!
}

"""
Edge of Artist Connection
"""
type ArtistConnectionEdge implements Edge {
  """
  Cursor to be used for pagination
  """
  cursor: String!
  """
  Artist node
  """
  node: Artist!
}

"""
Filter for paginated artists
"""
input ArtistCursorFilterArgs {
  """
  Specify whether artist already has at least one minted release
  """
  hasMintedRelease: Boolean
  """
  Specify season to be filtered
  """
  season: ArtistSeason
}

"""
Filter artist minted releases based on whether artist uploaded release or artist is credited on a split
"""
input ArtistMintedReleasesCursorFilterArgs {
  """
  Includes songs where that artist has a split
  """
  appearsOn: Boolean! = false
  """
  Includes songs uploaded by artist
  """
  sounds: Boolean! = true
}

"""
Filter for artist minted releases. Default is only for artist sounds.
"""
input ArtistMintedReleasesFilter {
  """
  Includes songs where that artist has a split
  """
  appearsOn: Boolean! = false
  """
  Filter if the release has credit splits
  """
  hasCreditSplits: Boolean
  """
  Includes songs uploaded by artist
  """
  sounds: Boolean! = true
}

"""
Types of seasons for artists
"""
enum ArtistSeason {
  GENESIS
  SEASON_ONE
  SEASON_THREE
  SEASON_TWO
}

"""
Chat Channel entity
"""
type ChatChannel {
  """
  Association identifier paired with "type"
  """
  associationId: String
  """
  Can the authenticated user send messages to the channel
  """
  canSendMessage: Boolean!
  """
  Date of creation of chat channel
  """
  createdAt: DateTime!
  """
  Unique identifier of chat channel
  """
  id: ID!
  """
  Members of chat channel
  """
  members: [ChatChannelMember!]!
  """
  Name of chat channel
  """
  name: String!
  """
  Type of chat channel
  """
  type: ChatChannelType!
}

"""
Chat channel member entity
"""
type ChatChannelMember {
  """
  Date of creation of member in chat channel
  """
  createdAt: DateTime!
  """
  Unique identifier of Chat Channel Member entity
  """
  id: ID!
  """
  Role of member in chat channel
  """
  role: String!
  """
  User entity of member
  """
  user: User!
}

"""
Chat Channel Type
"""
enum ChatChannelType {
  ARTIST
  DIRECT
  GROUP
  HOMEPAGE
  RELEASE
  UNKNOWN
}

"""
Chat message entity
"""
type ChatMessage implements Node {
  """
  Shorthand for user's avatar
  """
  avatar: Media
  """
  Channel identifier
  """
  channelId: ID!
  """
  Date of creation of message
  """
  createdAt: DateTime!
  """
  Unique identifier
  """
  id: ID!
  """
  Is message sent by an artist
  """
  isArtist: Boolean!
  """
  Message content
  """
  message: String!
  """
  Metadata associated with message
  """
  meta: [String!]!
  """
  Current status of message
  """
  status: ChatMessageStatus!
  """
  Message creator user
  """
  user: User!
  """
  Message creator user identifier
  """
  userId: ID!
}

"""
Pagination chat message edge
"""
type ChatMessageConnectionEdge implements Edge {
  """
  Pagination cursor
  """
  cursor: String!
  """
  Chat message node
  """
  node: ChatMessage!
}

"""
Chat message status
"""
enum ChatMessageStatus {
  HIDDEN
  VISIBLE
}

"""
Paginated connection of Chat messages
"""
type ChatMessagesConnection implements Connection {
  """
  Edges of current page
  """
  edges: [ChatMessageConnectionEdge!]!
  """
  Pagination helpers information
  """
  pageInfo: PageInfo!
}

"""
Simplified version of Release entity filtered on the owner public address
"""
type CollectedRelease implements Node {
  """
  Artist of release
  """
  artist: Artist!
  """
  Contract associated to Sound Edition
  """
  contract: Contract!
  """
  Cover image of release
  """
  coverImage: Media!
  """
  Release creation date
  """
  createdAt: DateTime!
  """
  Associated external url
  """
  externalUrl: String
  """
  Final quantity for a release. Will be defined once a sale finishes
  """
  finalQuantity: Int
  """
  Last sale schedule end time as number of milliseconds since the ECMAScript epoch.
  """
  finalSaleScheduleEndTimestamp: Timestamp
  """
  First backed nft of collected release
  """
  firstNftOwned: Nft
  """
  Returns golden egg if user owns, otherwise null
  """
  goldenEgg: EggGame
  """
  Special golden egg image
  """
  goldenEggImage: Media
  """
  Unique identifier of release
  """
  id: ID!
  """
  List of owned nft serial numbers in ascending serial number order
  """
  ownedSerialNumbers: [Int!]!
  """
  Public listening party start time
  """
  publicListeningPartyStart: DateTime!
  """
  Lower bound quantity for a releases main sale.
  """
  quantityLowerBound: Int!
  """
  Upper bound quantity for a releases main sale.
  """
  quantityUpperBound: Int!
  """
  Release title
  """
  title: String!
  """
  Release title slug
  """
  titleSlug: String!
  """
  Track of release
  """
  track: Track!
  """
  Type of Release
  """
  type: ReleaseType!
}

"""
Paginated collected releases connection
"""
type CollectedReleaseConnection implements Connection {
  """
  Edges of current page
  """
  edges: [CollectedReleaseConnectionEdge!]!
  """
  Pagination helpers information
  """
  pageInfo: PageInfo!
}

"""
Edge of Collected Release Connection
"""
type CollectedReleaseConnectionEdge implements Edge {
  """
  Cursor to be used for pagination
  """
  cursor: String!
  """
  Collected Release node
  """
  node: CollectedRelease!
}

"""
Comment entity
"""
type Comment {
  """
  Comment unique identifier
  """
  id: ID!
  """
  Comment message content
  """
  message: String!
  """
  Comment chain signature
  """
  signature: String!
  """
  Last update date of comment
  """
  updatedAt: DateTime!
}

"""
Base connection for paginated results
"""
interface Connection {
  """
  Edges of current page
  """
  edges: [Edge!]!
  """
  Pagination helpers information
  """
  pageInfo: PageInfo!
}

"""
Contract entity
"""
type Contract {
  """
  Contract address
  """
  contractAddress: String!
  """
  Type of contract
  """
  contractType: ContractType!
  """
  Date of creation
  """
  createdAt: DateTime!
  """
  Contract entity unique identifier
  """
  id: ID!
  """
  Contract owner
  """
  owner: User!
  """
  Public address of contract owner
  """
  ownerPublicAddress: String!
  """
  Date of last update
  """
  updatedAt: DateTime!
}

"""
Contract methods of transactions
"""
enum ContractMethod {
  ARTIST_CREATOR__CREATE_ARTIST
  ARTIST__BUY_EDITION
  ARTIST__CREATE_EDITION
  ARTIST__WITHDRAW_FUNDS
  SOUND_CREATOR__CREATE_SOUND_AND_MINTS
  SOUND_EDITION__WITHDRAW_ETH
  SPLIT_MAIN__CREATE_SPLIT
  SPLIT_MAIN__DISTRIBUTE_ETH
  SPLIT_MAIN__WITHDRAW
}

"""
Contract type, currently the playform only supports "ARTIST"
"""
enum ContractType {
  ALBUM
  ARTIST
  EDITION
}

"""
Credit allocation entity
"""
type CreditAllocation {
  """
  Credit split associated with credit allocation
  """
  creditSplit: CreditSplit!
  """
  Credit allocation entity identifier
  """
  id: ID!
  """
  Owner of credit allocation
  """
  owner: User!
  """
  Percent of allocation
  """
  percent: Float!
  """
  Roles associated with credit allocation
  """
  roles: [String!]!
}

"""
Credit split entity
"""
type CreditSplit {
  """
  The amount of credit to be withdrawn from the split for the authenticated user.
  """
  balanceToWithdraw: String
  """
  Credit split creation date
  """
  createdAt: DateTime!
  """
  Credit allocation of credit split
  """
  creditAllocations: [CreditAllocation!]!
  """
  Credit split identifier
  """
  id: ID!
  """
  Releases associated with credit split that are minted
  """
  mintedReleases: [Release!]!
  """
  Releases associated with credit split
  """
  releases: [Release!]!
  """
  Split contract address
  """
  splitAddress: String
  """
  Last update date of credit split entity
  """
  updatedAt: DateTime!
}

"""
Currencies conversions
"""
type Currencies {
  ethToUsd: Float!
}

"""
Base cursor connection arguments
"""
input CursorConnectionArgs {
  """
  Start forwards pagination since "after" cursor
  """
  after: String
  """
  Start backwards pagination since "before" cursor
  """
  before: String
  """
  Limit the amount of nodes to be fetched, to be used with "after", with a maximum of 50 nodes.
  """
  first: NonNegativeInt
  """
  Limit the amount of nodes to be fetched, to be used with "before", with a maximum of 50 nodes.
  """
  last: NonNegativeInt
  """
  Sort the connection ascending or descending
  """
  sort: SortOrder! = DESC
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
Input for discoverChatChannel query
"""
input DiscoverChatChannelInput {
  associationId: UUID
  type: ChatChannelType!
}

"""
Container of Node and the Cursor from the Node
"""
interface Edge {
  """
  Cursor to be used for pagination
  """
  cursor: String!
  """
  Node entity
  """
  node: Node!
}

"""
EggGame Entity
"""
type EggGame {
  """
  Block hash of egg game calculation
  """
  finalSerialBlockHash: String!
  """
  EggGame identifier
  """
  id: ID!
  """
  Nft of egg game winner
  """
  nft: Nft!
  """
  Serial number of nft with egg game
  """
  winningSerialNum: Int!
}

"""
Event type
"""
enum EventType {
  EDITION_PURCHASED
  ORDERS_MATCHED
  TRANSFER
  UNKNOWN
}

"""
Event entity
"""
type EventV2 implements Node {
  """
  Artist contract address
  """
  artistContractAddress: String
  """
  Timestamp on blockchain of event
  """
  blockTimestamp: DateTime!
  """
  Contract address
  """
  contractAddress: String!
  """
  Date of creation of event entity
  """
  createdAt: DateTime!
  """
  Event type
  """
  eventType: EventType!
  """
  Source public address
  """
  fromAddress: String
  """
  User associated to source public address
  """
  fromAddressUser: User
  """
  Event identifier
  """
  id: ID!
  """
  Release associated with event
  """
  release: Release
  """
  Target public address
  """
  toAddress: String
  """
  User associated to target public address
  """
  toAddressUser: User
  """
  Token ID of associated NFT
  """
  tokenId: String!
  """
  Value exchanged in Wei
  """
  valueExchanged: String!
  """
  Formatted version of value exchanged
  """
  valueExchangedPretty: ValueExchangedPrettyType!
}

"""
Genre entity
"""
type Genre {
  """
  Date of creation
  """
  createdAt: DateTime!
  """
  Genre associated UUID
  """
  id: ID!
  """
  Genre name
  """
  name: String!
  """
  Date of last update of genre
  """
  updatedAt: DateTime!
}

"""
Client key management entity
"""
type KeyClient implements Node {
  """
  Date of creation
  """
  createdAt: DateTime!
  """
  Unique identifier of client key
  """
  id: ID!
  """
  Key associated to client for authentication process
  """
  key: String!
  """
  Human-readable identifier of key client
  """
  name: String!
  """
  Status of Key Client
  """
  status: KeyClientStatus!
  """
  Date of last update
  """
  updatedAt: DateTime!
}

"""
Edge of Key Client Connection
"""
type KeyClientConnectionEdge implements Edge {
  """
  Cursor to be used for pagination
  """
  cursor: String!
  """
  Key Client node
  """
  node: KeyClient!
}

"""
Status of Key Client
"""
enum KeyClientStatus {
  ACTIVE
  INACTIVE
}

"""
Paginated latest sales events
"""
type LatestSalesConnection implements Connection {
  """
  Edges of current page
  """
  edges: [LatestSalesConnectionEdge!]!
  """
  Pagination helpers information
  """
  pageInfo: PageInfo!
}

"""
Edge of LatestSales Connection
"""
type LatestSalesConnectionEdge implements Edge {
  """
  Cursor to be used for pagination
  """
  cursor: String!
  """
  Event node
  """
  node: EventV2!
}

"""
Pagination parameters for Latest Sales connection
"""
input LatestSalesCursorConnectionArgs {
  """
  Start forwards pagination since "after" cursor
  """
  after: String
  """
  Start backwards pagination since "before" cursor
  """
  before: String
  """
  Limit the amount of nodes to be fetched, to be used with "after", with a maximum of 50 nodes.
  """
  first: NonNegativeInt
  """
  Limit the amount of nodes to be fetched, to be used with "before", with a maximum of 50 nodes.
  """
  last: NonNegativeInt
  """
  Customize sorting latest sales
  """
  sort: LatestSalesCursorConnectionSort! = { blockTimestamp: DESC }
}

"""
Customize sorting latest sales
"""
input LatestSalesCursorConnectionSort {
  """
  Sort by blockchain timestamp
  """
  blockTimestamp: SortOrder
  """
  Sort by date of creation of event entity
  """
  createdAt: SortOrder
}

"""
Filter for paginated latest sales
"""
input LatestSalesCursorFilterArgs {
  """
  Specify event types to be filtered
  """
  eventTypes: [EventType!]
}

"""
Media entity
"""
type Media {
  """
  AWS S3 Bucket
  """
  bucket: String!
  """
  Media entity identifier
  """
  id: ID!
  """
  AWS S3 File key
  """
  key: String!
  """
  CDN Url
  """
  url: String!
}

"""
Merkle tree entity
"""
type MerkleTree {
  """
  Upload step creation date
  """
  createdAt: DateTime!
  """
  Upload step identifier
  """
  id: ID!
  """
  Number of leaves for merkle tree
  """
  leafCount: Int!
  """
  Merkle tree root
  """
  root: String!
  """
  List of unhashed leaves for merkle tree
  """
  unhashedLeaves: [String!]!
}

"""
Merkle tree proof information
"""
type MerkleTreeProof {
  """
  Merkle proof
  """
  proof: [String!]!
  """
  Unhashed leaf in merkle tree
  """
  unhashedLeaf: String!
}

"""
Mint current time status
"""
enum MintTimeStatus {
  PAST
  UPCOMING
}

"""
Pagination parameters for Minted Releases connection
"""
input MintedReleasesCursorConnectionArgs {
  """
  Start forwards pagination since "after" cursor
  """
  after: String
  """
  Start backwards pagination since "before" cursor
  """
  before: String
  """
  Limit the amount of nodes to be fetched, to be used with "after", with a maximum of 50 nodes.
  """
  first: NonNegativeInt
  """
  Limit the amount of nodes to be fetched, to be used with "before", with a maximum of 50 nodes.
  """
  last: NonNegativeInt
  """
  Customize sort behavior of minted releases pagination
  """
  sort: MintedReleasesCursorConnectionSort! = { mintStartTime: DESC }
}

"""
Customize sort behavior of minted releases pagination
"""
input MintedReleasesCursorConnectionSort {
  """
  Sort by createdAt of release
  """
  createdAt: SortOrder
  """
  Sort by mintStartTime of release
  """
  mintStartTime: SortOrder
}

"""
Filter minted releases
"""
input MintedReleasesCursorFilterArgs {
  """
  Only get releases from specified genres
  """
  genre: [String!]
  """
  Remove currently-featured releases from results
  """
  hideFeatured: Boolean
  """
  Only get release with specified mint time status
  """
  mintTimeStatus: [MintTimeStatus!]
  """
  Only get release with specified status
  """
  releaseStatus: [ReleaseStatus!]
  """
  Only get releases from specified seasons
  """
  season: [ArtistSeason!]
}

"""
Mutations
"""
type Mutation {
  """
  [PUBLIC] Generate auth challenge for given public address and give back new nonce
  """
  generateAuthChallenge(publicAddress: String!): Int!
  """
  [PUBLIC] Check if specified queue is open
  """
  isQueueOpen(
    """
    Presale configuration identifier
    """
    presaleId: UUID!
  ): Boolean
  """
  [PUBLIC] Report a track play session stop
  """
  reportPlayStopped(
    """
    Input for reportPlayStopped
    """
    input: ReportPlayStoppedInput!
  ): Void
  """
  [PUBLIC] Verify given auth challenge
  """
  verifyAuthChallenge(
    """
    User public address
    """
    publicAddress: String!
    """
    Signed message by wallet
    """
    signedMessage: String!
  ): String!
}

"""
NFT Entity
"""
type Nft implements Node {
  """
  Amount paid in Wei for NFT
  """
  amountPaidInWei: String!
  """
  Comment set for NFT
  """
  comment: Comment
  """
  Contract address
  """
  contractAddress: String!
  """
  Date of creation of NFT entity
  """
  createdAt: DateTime!
  """
  Block number of the nft mint
  """
  createdAtBlockNum: Int!
  """
  Blockchain created date of NFT
  """
  createdAtBlockTime: DateTime
  """
  Nft UUID
  """
  id: ID!
  """
  Is the NFT a golden egg
  """
  isGoldenEgg: Boolean!
  """
  Was the NFT bought on a presale
  """
  isPresaleNft: Boolean!
  """
  Owner of NFT
  """
  owner: User!
  """
  Release associated with NFT
  """
  release: Release!
  """
  Acumulative serial number
  """
  serialNumber: Int!
  """
  Song slot reserved by NFT
  """
  songSlot: Int
  """
  Unique chain token identifier
  """
  tokenId: ID!
  """
  Last update date of NFT
  """
  updatedAt: DateTime!
  """
  Block number of the last transfer state
  """
  updatedAtBlockNum: Int!
}

"""
Paginated NFTs connection
"""
type NftConnection implements Connection {
  """
  Edges of current page
  """
  edges: [NftConnectionEdge!]!
  """
  Pagination helpers information
  """
  pageInfo: PageInfo!
}

"""
NFT Node edge
"""
type NftConnectionEdge implements Edge {
  """
  Cursor to be used for pagination
  """
  cursor: String!
  """
  NFT Entity
  """
  node: Nft!
}

"""
Cursor connection parameters for NFTs
"""
input NftCursorConnectionArgs {
  """
  Start forwards pagination since "after" cursor
  """
  after: String
  """
  Start backwards pagination since "before" cursor
  """
  before: String
  """
  Limit the amount of nodes to be fetched, to be used with "after", with a maximum of 50 nodes.
  """
  first: NonNegativeInt
  """
  Limit the amount of nodes to be fetched, to be used with "before", with a maximum of 50 nodes.
  """
  last: NonNegativeInt
  """
  Customize sort behavior
  """
  sort: NftCursorConnectionSort! = { secondarySaleDate: DESC }
}

"""
Customize the sort behavior of Nfts pagination
"""
input NftCursorConnectionSort {
  """
  Sort by date of primary sale
  """
  primarySaleDate: SortOrder
  """
  Sort by date of last secondary sale with default value of primary sale date
  """
  secondarySaleDate: SortOrder
  """
  Sort by serial number
  """
  serialNumber: SortOrder
}

"""
Simplified version of Nft entity filtered to be with non-nullable comment
"""
type NftWithComment {
  """
  Amount paid in Wei for NFT
  """
  amountPaidInWei: String!
  """
  Avatar URL of Nft owner
  """
  avatarUrl: String
  """
  Comment of NFT
  """
  comment: Comment!
  """
  Contract address
  """
  contractAddress: String!
  """
  Unique identifier of Nft
  """
  id: ID!
  """
  Was the NFT bought on a presale
  """
  isPresaleNft: Boolean!
  """
  If the Nft owner is an artist, returns the name of the artist
  """
  ownerArtistName: String
  """
  Public wallet address of owner
  """
  ownerPublicAddress: String!
  """
  Twitter handle of owner
  """
  ownerTwitterHandle: String
  """
  Timestamp of purchased date
  """
  purchasedAt: Timestamp!
  """
  Acumulative serial number
  """
  serialNumber: Int!
  """
  Song slot reserved by NFT
  """
  songSlot: Int!
  """
  Unique chain token identifier
  """
  tokenId: String!
}

"""
Base node
"""
interface Node {
  """
  Node identifier
  """
  id: ID!
}

"""
Integers that will have a value of 0 or more.
"""
scalar NonNegativeInt

"""
Require only holders of specific contracts
"""
type OnlyTokenHolders {
  """
  Token Contract Address
  """
  tokenContractAddress: String!
  """
  Token Symbol from Contract
  """
  tokenSymbol: String
  """
  Token Threshold to qualify on whitelist
  """
  tokenThresholdToQualify: String!
}

"""
Require Top Collectors flag
"""
type OnlyTopCollectors {
  """
  How many of the top collectors are allowed
  """
  topNum: Int!
}

"""
Pagination helper information
"""
type PageInfo {
  """
  Cursor shorthand of the last node from current page
  """
  endCursor: String
  """
  Does the current connection have a next page
  """
  hasNextPage: Boolean!
  """
  Does the current connection have a previous page
  """
  hasPreviousPage: Boolean!
  """
  Cursor shorthand of the first node from current page
  """
  startCursor: String
}

"""
Playlist entity that contains tracks
"""
interface Playlist {
  """
  Ephemeral Unique UUID. Since right now the playlists are not being persisted, it's a completely randomly created UUID created on memory
  """
  id: ID!
  """
  Track list
  """
  tracks: [PlaylistTrack!]!
}

"""
Playlist of tracks of an artist
"""
type PlaylistArtist implements Playlist {
  artistId: ID!
  """
  Ephemeral Unique UUID. Since right now the playlists are not being persisted, it's a completely randomly created UUID created on memory
  """
  id: ID!
  """
  Track list
  """
  tracks: [PlaylistTrack!]!
}

"""
Playlist of tracks of a holder' NFTs
"""
type PlaylistHolder implements Playlist {
  """
  Holder public address
  """
  holderPublicAddress: String!
  """
  Ephemeral Unique UUID. Since right now the playlists are not being persisted, it's a completely randomly created UUID created on memory
  """
  id: ID!
  """
  Track list
  """
  tracks: [PlaylistTrack!]!
}

"""
Playlist used for Homepage and fallback for extra pages
"""
type PlaylistHome implements Playlist {
  createdAt: DateTime!
  """
  Ephemeral Unique UUID. Since right now the playlists are not being persisted, it's a completely randomly created UUID created on memory
  """
  id: ID!
  """
  Track list
  """
  tracks: [PlaylistTrack!]!
}

"""
Playlist input
"""
input PlaylistInput {
  """
  Association ID based on type of playlist
  """
  associationId: String
  """
  Type of playlist
  """
  type: PlaylistType!
}

"""
Simplified track entity to only contain identifiers to associated entities
"""
type PlaylistTrack {
  """
  Artist ID
  """
  artistId: ID!
  """
  Track ID
  """
  id: ID!
  """
  Release ID
  """
  releaseId: ID!
}

"""
Currently supported playlists
"""
enum PlaylistType {
  ARTIST
  HOLDER
  HOME
}

"""
Integers that will have a value greater than 0.
"""
scalar PositiveInt

"""
Main configuration entity of release sale
"""
type PresaleConfiguration {
  """
  Currently activate sale schedule, loosely-based on requested time
  """
  currentSaleSchedule: SaleSchedule
  """
  Most recent past sale schedule, loosely-based on requested time
  """
  getMostRecentSaleSchedule: SaleSchedule
  """
  Entity UUID
  """
  id: ID!
  """
  Release UUID of Presale Configuration
  """
  releaseId: ID!
  """
  List of sale schedule information of Release
  """
  saleSchedules: [SaleSchedule!]!
  """
  Signing key UUID
  """
  signingKeyId: String!
}

"""
Presale Media information
"""
type PresaleMediaInfo {
  """
  Collection Name
  """
  collectionName: String
  """
  Size of collection
  """
  collectionSize: Int
  """
  Contract Address
  """
  contractAddress: String
  """
  Custom description
  """
  description: String
  """
  Icon Overlay URIs
  """
  iconOverlayURI: String
  """
  Image URIs
  """
  imageURIs: [String!]
  """
  Social Links of Sale
  """
  socialLinks: SocialLinks
  """
  Amount of unique holders
  """
  uniqueHolders: Int
}

"""
Queries
"""
type Query {
  """
  [PUBLIC] Get all minted releases. Warning, this query is going to be removed soon, use paginated queries instead
  """
  allMintedReleases: [Release!]! @deprecated(reason: "Use paginated queries instead")
  """
  [PUBLIC] Get all minted releases
  """
  allMintedReleasesPaginated(
    """
    Filter releases
    """
    filter: MintedReleasesCursorFilterArgs
    """
    Pagination parameters
    """
    pagination: MintedReleasesCursorConnectionArgs! = { first: 10, sort: { mintStartTime: DESC } }
  ): ReleaseConnection!
  """
  [PUBLIC] Artist by UUID
  """
  artist(
    """
    Artist identifier
    """
    id: UUID!
  ): Artist
  """
  [PUBLIC] Artist by handle
  """
  artistByHandle(
    """
    Artist handle
    """
    soundHandle: String!
  ): Artist
  """
  Get the nft collectors of the specified artist
  """
  artistCollectors(
    """
    Input for artistCollectors query
    """
    input: ArtistCollectorsInput!
  ): ArtistCollectors!
  """
  [PUBLIC] Get all artists of platform.
  """
  artists(
    """
    Paginated artists filters
    """
    filter: ArtistCursorFilterArgs
    """
    Pagination parameters
    """
    pagination: CursorConnectionArgs! = { first: 10, sort: DESC }
  ): ArtistConnection!
  """
  [PUBLIC] Get audio from track
  """
  audioFromTrack(
    """
    Track identifier
    """
    trackId: UUID!
  ): TrackAudio!
  """
  [PUBLIC] Get authenticated user information, if any
  """
  authUser: User
  """
  [PUBLIC] Get chat messages of specified chat channel
  """
  chatMessages(
    """
    Chat channel id
    """
    channelId: UUID!
    """
    Pagination parameters
    """
    pagination: CursorConnectionArgs! = { first: 10, sort: DESC }
  ): ChatMessagesConnection!
  """
  [PUBLIC] Get credit split by id
  """
  creditSplit(
    """
    Credit split identifier
    """
    id: UUID!
  ): CreditSplit
  """
  [PUBLIC] Get currencies conversions
  """
  currencies: Currencies!
  """
  [PUBLIC] Check if specified chat channel type+id is available for specified authenticated user
  """
  discoverChatChannel(
    """
    Combination of type + associationId to discover chat channel entity if available
    """
    input: DiscoverChatChannelInput!
  ): ChatChannel
  """
  [PUBLIC] Get EggGame of specified release
  """
  eggGame(
    """
    Release identifier
    """
    releaseId: UUID!
  ): EggGame
  """
  [PUBLIC] Get eligible users for presale on specified presale configuration
  """
  eligibleUsersForPresale(
    """
    Presale configuration identifier
    """
    presaleConfigurationId: UUID!
  ): [User!]!
  """
  [PUBLIC] Get currently-featured releases
  """
  featuredReleases: [Release!]!
  """
  [PUBLIC] Check if Queue Captcha is disabled for specified release
  """
  isMainQueueCaptchaDisabled(
    """
    Release identifier
    """
    releaseId: String!
  ): Boolean
  """
  [PUBLIC] Get the latest events
  """
  latestEventsPaginated(
    """
    Paginated latest sales filters
    """
    filter: LatestSalesCursorFilterArgs
    """
    Pagination parameters
    """
    pagination: LatestSalesCursorConnectionArgs! = { first: 10, sort: { blockTimestamp: DESC } }
  ): LatestSalesConnection!
  """
  [PUBLIC] Get merkle tree information
  """
  merkleTree(
    """
    Merkle tree root input
    """
    root: String!
  ): MerkleTree!
  """
  [PUBLIC] Get merkle tree information
  """
  merkleTreeProof(
    """
    Merkle tree root input
    """
    root: String!
    """
    Merkle tree unhashed leaf input for proof
    """
    unhashedLeaf: String!
  ): MerkleTreeProof
  """
  [PUBLIC] Get minted release by Artist sound handle and release title slug
  """
  mintedRelease(
    """
    Release title slug
    """
    releaseSlug: String!
    """
    Artist sound handle
    """
    soundHandle: String!
  ): Release
  """
  [PUBLIC] Get all minted releases of an artist
  """
  mintedReleases(
    """
    Filter artist releases
    """
    filter: ArtistMintedReleasesCursorFilterArgs!
    """
    Artist identifier
    """
    id: UUID!
    """
    Pagination parameters
    """
    pagination: CursorConnectionArgs! = { first: 10, sort: DESC }
  ): ReleaseConnection! @deprecated(reason: "Use Artist.mintedReleasesPaginated instead")
  """
  [PUBLIC] Current UNIX date to test caching
  """
  now: Int!
  """
  [PUBLIC] Test query to get the date of calculation of resolver based using response cache
  """
  nowCached(
    """
    Amount of seconds for the response to be cached
    """
    ttlSeconds: Int! = 3
  ): Timestamp!
  """
  [PUBLIC] Past minted releases
  """
  pastMintedReleases(
    """
    Filter past minted releases
    """
    filter: MintedReleasesCursorFilterArgs
    """
    Pagination parameters
    """
    pagination: CursorConnectionArgs! = { first: 10, sort: DESC }
  ): ReleaseConnection!
  """
  [PUBLIC] Get playlist based on given type and associationId
  """
  playlist(
    """
    Input for playlist query
    """
    input: PlaylistInput!
  ): Playlist
  """
  [PUBLIC] Presale Configuration of specified Release
  """
  presaleConfiguration(
    """
    Release identifier
    """
    releaseId: UUID!
  ): PresaleConfiguration
  """
  [PUBLIC] Get release by id
  """
  release(
    """
    Release identifier
    """
    id: UUID!
  ): Release
  """
  [PUBLIC] Can the specified release be minted more than once
  """
  releaseCanBeMintedMoreThanOnce(
    """
    Release identifier
    """
    releaseId: String!
  ): Boolean!
  """
  [PUBLIC] Get release by contract address
  """
  releaseContract(
    """
    Contract address
    """
    contractAddress: Address!
    """
    Optional editionId of release
    """
    editionId: String
  ): Release!
  """
  [PUBLIC] List of genres that have at least 1 past minted release
  """
  releaseGenres: [Genre!]!
  """
  Search releases or artists based on text inputs
  """
  search(input: SearchInput!): SearchResult!
  """
  [PUBLIC] Get specified shelf by id
  """
  shelf(
    """
    Shelf identifier
    """
    id: UUID!
  ): Shelf!
  """
  [PUBLIC] Top collectors of artist by number of nfts owned
  """
  topNftsOwnedCollectors(
    """
    Artist id
    """
    id: UUID!
  ): [ArtistCollector!]
  """
  [PUBLIC] Get total raised of the whole platform
  """
  totalRaised: TotalRaised!
  """
  [PUBLIC] Get track by id
  """
  track(
    """
    Track identifier
    """
    id: UUID!
  ): Track
  """
  [PUBLIC] Get trending artists information
  """
  trendingArtistInfo(
    """
    Sort logic used
    """
    sort: TrendingArtistsSortEnum!
    """
    For what time period the data should come from
    """
    timePeriod: TimePeriodAggEnum!
  ): [TrendingArtistInfo!]!
  """
  [PUBLIC] Get trending collectors information
  """
  trendingCollectors(
    """
    Sort logic used
    """
    sort: TrendingCollectorsSortEnum!
    """
    For what time period the data should come from
    """
    timePeriod: TimePeriodAggEnum!
  ): [TrendingCollectorInfo!]!
  """
  [PUBLIC] Upcoming minted releases
  """
  upcomingMintedReleases(
    """
    Filter upcoming minted releases
    """
    filter: MintedReleasesCursorFilterArgs
    """
    Pagination parameters
    """
    pagination: CursorConnectionArgs! = { first: 10, sort: DESC }
  ): ReleaseConnection!
  """
  [PUBLIC] Get specified user by id
  """
  user(
    """
    User identifier
    """
    id: UUID!
  ): User
  """
  [PUBLIC] Get specified user by public address
  """
  userByAddress(
    """
    User public address
    """
    publicAddress: Address!
  ): User
  """
  [PUBLIC] Get specified user by sound handle
  """
  userByArtistHandle(soundHandle: String!): User
}

"""
Release entity
"""
type Release implements Node {
  """
  Artist of release
  """
  artist: Artist!
  """
  Artist contract address
  """
  artistContractAddress: String! @deprecated(reason: "Use contractAddress instead")
  """
  Available balance to withdraw for an edition
  """
  balanceToWithdraw: String
  """
  Behind the music text
  """
  behindTheMusic: String!
  """
  Currently claimed song slots
  """
  claimedSongSlots: [Int!]!
  """
  Contract associated to Sound Edition
  """
  contract: Contract!
  """
  Contract address
  """
  contractAddress: String!
  """
  Cover image of release
  """
  coverImage: Media!
  """
  Release creation date
  """
  createdAt: DateTime!
  """
  Credit split associated with release, if any
  """
  creditSplit: CreditSplit
  """
  Users with credits of release
  """
  credits: [User!]!
  """
  The current maximum quantity for a sale.
  """
  currentMaxQuantity: Int!
  """
  Description of release
  """
  description: String
  """
  Edition ID
  """
  editionId: String
  """
  EggGame of Release
  """
  eggGame: EggGame
  """
  Associated external url
  """
  externalUrl: String
  """
  Final quantity for a release. Will be defined once a sale finishes
  """
  finalQuantity: Int
  """
  Last sale schedule end time as ISO Date String
  """
  finalSaleScheduleEndTime: DateTime
  """
  Last sale schedule end time as number of milliseconds since the ECMAScript epoch.
  """
  finalSaleScheduleEndTimestamp: Timestamp
  """
  Genre of Release
  """
  genre: Genre!
  """
  Special golden egg image
  """
  goldenEggImage: Media!
  """
  Is the release a range bound edition
  """
  hasRangeBoundSale: Boolean!
  """
  Release identifier
  """
  id: ID!
  """
  Is release sold out relative to the final quantity
  """
  isFinalSoldOut: Boolean!
  """
  Associated laylo.com url
  """
  layloUrl: String
  """
  Public sale start time in UNIX timestamp
  """
  mintStartTime: Int!
  """
  NFTs of Release
  """
  nftsPaginated(
    """
    Pagination parameters
    """
    pagination: NftCursorConnectionArgs! = { after: null, first: 30, sort: { secondarySaleDate: DESC } }
  ): NftConnection!
  """
  Amount of sold NFTs
  """
  numSold: Int!
  """
  On blockchain start time
  """
  onChainStartDateTime: DateTime!
  """
  On blockchain start time in UNIX timestamp
  """
  onChainStartTime: Int!
  """
  Associated opensea url
  """
  openseaUrl: String
  """
  Presale listening party start time
  """
  presaleListeningPartyStart: DateTime
  """
  Presale minting party start time
  """
  presaleMintStart: DateTime
  """
  Max Quantity for a releases presale.
  """
  presaleUpperBound: Int
  """
  Price in Wei
  """
  price: String!
  """
  Public listening party timestamp
  """
  publicListeningParty: Timestamp
  """
  Public listening party start time
  """
  publicListeningPartyStart: DateTime!
  """
  Public minting start time
  """
  publicMintStart: DateTime!
  """
  Quantity of available NFTs
  """
  quantity: Int!
  """
  Lower bound quantity for a releases main sale.
  """
  quantityLowerBound: Int!
  """
  Upper bound quantity for a releases main sale.
  """
  quantityUpperBound: Int!
  """
  Rewards of Release
  """
  rewards: [Reward!]!
  """
  Season associated to release
  """
  season: String
  """
  Release title
  """
  title: String!
  """
  Slugified title
  """
  titleSlug: String!
  """
  Top 100 Nfts with comment, ordered by serial number ascendingly
  """
  topNftsWithComment: [NftWithComment!]!
  """
  Total raised in Wei
  """
  totalRaised: String!
  """
  Total amount raised from primary sales converted from eth to usd
  """
  totalRaisedPrimaryUsd: Float!
  """
  Total amount raised from primary sales converted from eth to usd
  """
  totalRaisedSecondaryUsd: Float!
  """
  Track of release
  """
  track: Track!
  """
  Tracks of release
  """
  tracks: [Track!]! @deprecated(reason: "Prefer using Release.track instead")
  """
  Type of Release
  """
  type: ReleaseType!
  """
  Total number of upload steps
  """
  uploadSteps: Int!
  """
  Number of upload steps already complete
  """
  uploadStepsComplete: Int!
}

"""
Paginated releases connection
"""
type ReleaseConnection implements Connection {
  """
  Edges of current page
  """
  edges: [ReleaseConnectionEdge!]!
  """
  Pagination helpers information
  """
  pageInfo: PageInfo!
}

"""
Edge of Release Connection
"""
type ReleaseConnectionEdge implements Edge {
  """
  Cursor to be used for pagination
  """
  cursor: String!
  """
  Release node
  """
  node: Release!
}

"""
Release current status type
"""
enum ReleaseStatus {
  AVAILABLE_TO_MINT
  SOLD_OUT
}

"""
Release type, currently the platform only supports "SINGLE"
"""
enum ReleaseType {
  ALBUM
  COMPILATION
  EP
  PLAYLIST
  SINGLE
}

"""
Input for reportPlayStopped mutation
"""
input ReportPlayStoppedInput {
  """
  End of play session
  """
  finish: Timestamp!
  """
  Duration of play in seconds
  """
  listenDuration: Int!
  """
  Amount of pauses on the same session
  """
  pauseCount: Int!
  """
  Start of play session
  """
  start: Timestamp!
  """
  Track UUID
  """
  trackId: UUID!
  """
  Random UUID generated by client-side
  """
  uuid: String!
}

"""
Require Any Sound Holder flag
"""
type RequireAnySoundHolder {
  enabled: Boolean!
}

"""
Require Artist Sound Holder flag
"""
type RequireArtistSoundHolder {
  enabled: Boolean!
}

"""
Require Twitter Verification flag
"""
type RequireTwitterVerification {
  enabled: Boolean!
}

"""
Reward entity
"""
type Reward {
  """
  Reward description
  """
  description: String!
  """
  Reward identifier
  """
  id: ID!
  """
  Amount of backers of reward
  """
  numOfBackers: Int!
  """
  Price of reward
  """
  price: String!
  """
  Reward title
  """
  title: String!
}

"""
Single sale schedule information of Release Presale Configuration
"""
type SaleSchedule {
  """
  Amount of people to be allowed to be whitelist at the same time, it's usually better to set it as the same as presaleAmount
  """
  cohortSize: Int!
  """
  End Time of Sale Schedule
  """
  endTime: DateTime!
  """
  UUID of Sale Schedule entity
  """
  id: ID!
  """
  Is the current sale schedule presale
  """
  isPresale: Boolean!
  """
  Merkle tree root hash derived from sale schedule allowlist
  """
  merkleTreeRoot: String
  """
  Special information related to onlyTokenHolders whitelist rule if present
  """
  onlyTokenHoldersInfo: [PresaleMediaInfo!]!
  """
  Presale amount to be sold
  """
  presaleAmount: Int!
  """
  Price for the specific sale schedule
  """
  price: String!
  """
  Start Time of Sale Schedule
  """
  startTime: DateTime!
  """
  Whitelist Rules of sale schedule
  """
  whitelistRulesParsed: [WhitelistRules!]!
}

"""
Input for "search" query
"""
input SearchInput {
  """
  How many entities to be fetched, maximum of 20
  """
  limit: PositiveInt! = 5
  """
  Text search
  """
  text: String!
}

"""
Search result
"""
type SearchResult {
  """
  Artists that match the search input, including artists where any of their releases matches the given input
  """
  artists: [Artist!]!
  """
  Unique identifier of search result
  """
  id: ID!
  """
  Releases that match the search input, including releases where the artist name matches the given input
  """
  releases: [Release!]!
}

"""
Shelf entity
"""
type Shelf implements Node {
  """
  Paginated collected releases of shelf
  """
  collectedReleases(
    """
    Pagination parameters
    """
    pagination: ShelfStackCursorConnectionArgs! = { after: null, first: 5, sort: { index: ASC } }
  ): CollectedReleaseConnection!
  """
  Shelf creation date
  """
  createdAt: DateTime!
  """
  Shelf deletion date
  """
  deletedAt: DateTime
  """
  Description of shelf
  """
  description: String
  """
  Shelf identifier
  """
  id: ID!
  """
  Relative ordering of the shelves for each user
  """
  index: Int!
  """
  Shelf name
  """
  name: String!
  """
  Total play time of all releases in a shelf in seconds
  """
  playTimeInSeconds: Int!
  """
  Number of releases in a shelf
  """
  releaseCount: Int!
  """
  List of trackIds in a shelf
  """
  trackIds: [UUID!]!
  """
  Type of shelf
  """
  type: ShelfType!
  """
  Owner of shelf
  """
  user: User!
}

"""
Paginated shelves connection
"""
type ShelfConnection implements Connection {
  """
  Edges of current page
  """
  edges: [ShelfConnectionEdge!]!
  """
  Pagination helpers information
  """
  pageInfo: PageInfo!
}

"""
Shelf Node edge
"""
type ShelfConnectionEdge implements Edge {
  """
  Cursor to be used for pagination
  """
  cursor: String!
  """
  Shelf Entity
  """
  node: Shelf!
}

"""
Cursor connection parameters for shelves
"""
input ShelfCursorConnectionArgs {
  """
  Start forwards pagination since "after" cursor
  """
  after: String
  """
  Start backwards pagination since "before" cursor
  """
  before: String
  """
  Limit the amount of nodes to be fetched, to be used with "after", with a maximum of 50 nodes.
  """
  first: NonNegativeInt
  """
  Limit the amount of nodes to be fetched, to be used with "before", with a maximum of 50 nodes.
  """
  last: NonNegativeInt
  """
  Customize sort behavior
  """
  sort: ShelfCursorConnectionSort! = { index: ASC }
}

"""
Customize the sort behavior of Nfts pagination
"""
input ShelfCursorConnectionSort {
  """
  Sort by shelf index value
  """
  index: SortOrder
}

"""
Shelf stack entity
"""
type ShelfStack implements Node {
  """
  Release creation date
  """
  createdAt: DateTime!
  """
  Release identifier
  """
  id: ID!
  """
  Release creation date
  """
  index: Int!
  """
  NFTs of Shelf stack
  """
  nfts: [Nft!]!
  """
  Release of the shelf stack
  """
  release: Release!
}

"""
Shelf stack node edge
"""
type ShelfStackConnectionEdge implements Edge {
  """
  Cursor to be used for pagination
  """
  cursor: String!
  """
  Shelf stack entity
  """
  node: ShelfStack!
}

"""
Cursor connection parameters for shelf stacks
"""
input ShelfStackCursorConnectionArgs {
  """
  Start forwards pagination since "after" cursor
  """
  after: String
  """
  Start backwards pagination since "before" cursor
  """
  before: String
  """
  Limit the amount of nodes to be fetched, to be used with "after", with a maximum of 50 nodes.
  """
  first: NonNegativeInt
  """
  Limit the amount of nodes to be fetched, to be used with "before", with a maximum of 50 nodes.
  """
  last: NonNegativeInt
  """
  Customize sort behavior
  """
  sort: ShelfStackCursorConnectionSort! = { index: ASC }
}

"""
Customize the sort behavior of Nfts pagination
"""
input ShelfStackCursorConnectionSort {
  """
  Sort by shelf index value
  """
  index: SortOrder
}

"""
Shelf type
"""
enum ShelfType {
  DEFAULT
}

"""
Social Links
"""
type SocialLinks {
  """
  Instagram Platform
  """
  instagramLink: String
  """
  OpenSea Platform
  """
  openseaLink: String
  """
  Twitter Platform
  """
  twitterLink: String
}

"""
Ascending or Descending sort
"""
enum SortOrder {
  ASC
  DESC
}

"""
Realtime Subscriptions
"""
type Subscription {
  """
  [PUBLIC] Subscribe to updates of specified chat channel messages
  """
  chatChannelMessages(chatChannelId: UUID!): ChatMessage!
  count(n: Int! = 5): Int!
  """
  [PUBLIC] Subscribe to release updates
  """
  release(
    """
    Release identifier
    """
    id: UUID!
  ): Release!
  """
  [PUBLIC] Subscribe to updates of release nfts
  """
  releaseNfts(
    """
    Release identifier
    """
    releaseId: UUID!
  ): Nft!
  """
  [PUBLIC] Subscribe to updates of release nfts comments
  """
  releaseNftsComments(
    """
    Release identifier
    """
    releaseId: UUID!
  ): NftWithComment!
  """
  [PUBLIC] Subscribe to the latest token sales updates
  """
  tokenSales: EventV2!
}

"""
Time period to aggregate trending table queries
"""
enum TimePeriodAggEnum {
  ALL_TIME
  ONE_DAY
  ONE_MONTH
  SEVEN_DAY
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

"""
Total raised on Ethereum and USD
"""
type TotalRaised {
  eth: Float!
  usd: Float!
}

"""
Track entity
"""
type Track {
  """
  Duration in seconds
  """
  duration: Int!
  """
  Track identifier
  """
  id: ID!
  """
  Normalized peaks of song
  """
  normalizedPeaks: [Int!]!
  """
  Track's Release
  """
  release: Release!
  """
  Release Identifier
  """
  releaseId: ID!
  """
  Track title
  """
  title: String!
  """
  Track number relative to other tracks (unused)
  """
  trackNumber: Int!
}

"""
Track audio
"""
type TrackAudio {
  """
  Track audio, transcoded version if available
  """
  audio: Media
  """
  Track audio, original non-transcoded version
  """
  audioOriginal: Media
  """
  Track duration in seconds
  """
  duration: Int!
  """
  Track identifier
  """
  id: ID!
  """
  Release entity of track
  """
  release: Release!
  """
  Release identifier
  """
  releaseId: ID!
  """
  Reveal time in UNIX timestamp of track based on authenticated user (if authenticated)
  """
  revealTime: Int!
}

"""
Transaction entity
"""
type Transaction {
  """
  Chain identifier used for transaction
  """
  chainId: Int!
  """
  Contract method of transaction
  """
  contractMethod: ContractMethod!
  """
  Transaction hash on chain
  """
  hash: String!
  """
  Transaction identifier
  """
  id: ID!
  """
  Release identifier
  """
  releaseId: String
  """
  Transaction status, "pending", "failed" or "confirmed")
  """
  status: String!
}

"""
Trending Artist Info
"""
type TrendingArtistInfo {
  """
  Artist entity
  """
  artist: Artist
  """
  Artist identifier
  """
  artistId: ID!
  """
  Amount of NFTs sold
  """
  nftsSold: Int!
  """
  Primary sales of artist in Wei
  """
  primarySales: String!
  """
  Primary sales of artist in USD
  """
  primarySalesUsd: Float!
  """
  Secondary sales of artist in Wei
  """
  secondarySales: String!
  """
  Secondary sales of artist in USD
  """
  secondarySalesUsd: Float!
  """
  Sum of primary and secondary sales in Wei
  """
  totalSales: String!
  """
  Sum of primary and secondary sales in USD
  """
  totalSalesUsd: Float!
  """
  Amount of unique collectors
  """
  uniqueCollectors: Int!
}

"""
Type of sort parameter used for trending artists
"""
enum TrendingArtistsSortEnum {
  NFTS_SOLD
  PRIMARY_SALES
  SECONDARY_SALES
  TOTAL_SALES
  UNIQUE_COLLECTORS
}

"""
Trending Collector information
"""
type TrendingCollectorInfo {
  """
  Amount of unique creators supported
  """
  creatorsSupported: Int!
  """
  Amount of NFTs bought
  """
  nftsBought: Int!
  """
  Total spent in Wei
  """
  totalSpent: String!
  """
  Total spent in USD
  """
  totalSpentUsd: Float!
  """
  Collector user entity
  """
  user: User
  """
  User public address of the collector
  """
  userAddress: String!
}

"""
Type of sort paratemer used for trending collectors
"""
enum TrendingCollectorsSortEnum {
  CREATORS_SUPPORTED
  NFTS_BOUGHT
  TOTAL_SPENT
}

"""
User relation type
"""
enum TypeOfRelation {
  FOLLOWING
}

"""
UUID v4
"""
scalar UUID

"""
User entity
"""
type User implements Node {
  """
  Optional artist entity for users with artist profile
  """
  artist: Artist
  """
  From how many unique artists the users holds nfts
  """
  artistsBacked: Float!
  """
  The user's aggregated available balance on fully-owned releases + their SplitMain balance
  """
  availableToWithdraw: String!
  """
  User avatar
  """
  avatar: Media
  """
  Banner image for user profile
  """
  bannerImage: Media
  """
  Paginated collected releases of user
  """
  collectedReleases(
    """
    Pagination parameters
    """
    pagination: CursorConnectionArgs! = { first: 10, sort: DESC }
  ): CollectedReleaseConnection!
  """
  Rank of user for number of bought nfts
  """
  collectorPosition: Int
  """
  User entity creation
  """
  createdAt: DateTime!
  """
  Credit allocations associated with user
  """
  creditAllocations: [CreditAllocation!]!
  """
  User custom description
  """
  description: String
  """
  Custom display name
  """
  displayName: String
  """
  Optional user email
  """
  email: String
  """
  User's ethereum name service domain
  """
  ens: String
  """
  List of releases in featured sounds
  """
  featuredSounds: [CollectedRelease!]!
  """
  How many followers a user has
  """
  followerCount: Int!
  """
  Paginated followers of user
  """
  followers(
    """
    Pagination parameters
    """
    pagination: CursorConnectionArgs! = { first: 10, sort: DESC }
  ): UserRelationConnection!
  """
  Paginated following of user
  """
  following(
    """
    Pagination parameters
    """
    pagination: CursorConnectionArgs! = { first: 10, sort: DESC }
  ): UserRelationConnection!
  """
  How many users a user is following
  """
  followingCount: Int!
  """
  Does the user have the artist role to be able to have an artist profile
  """
  hasArtistRole: Boolean!
  """
  Returns whether user has at least one shelf with at least one release
  """
  hasShelfWithItems: Boolean!
  """
  User UUID
  """
  id: ID!
  """
  User instagram handle
  """
  instagramHandle: String
  """
  How many nfts a user owns
  """
  nftsOwned: Int!
  """
  Paginated NFTs owned by user
  """
  nftsPaginated(
    """
    Filter the NFTs to be requested
    """
    filter: UserNftsConnectionFilters
    """
    Pagination parameters
    """
    pagination: NftCursorConnectionArgs! = { after: null, first: 30, sort: { secondarySaleDate: DESC } }
  ): NftConnection!
  """
  Nonce for authentication purposes
  """
  nonce: Int!
  """
  Wallet public address
  """
  publicAddress: String!
  """
  Possible roles for user
  """
  roles: UserRoles!
  """
  Paginated shelves of user
  """
  shelves(
    """
    Pagination parameters
    """
    pagination: ShelfCursorConnectionArgs! = { after: null, first: 5, sort: { index: ASC } }
  ): ShelfConnection!
  """
  Should the user show the splits feature
  """
  showSplitsFeature: Boolean!
  """
  The user's aggregated balance on the 0xSplits SplitMain contract
  """
  splitBalance: String!
  """
  List of pending transactions associated with user
  """
  transactions: [Transaction!]!
  """
  Verifier twitter handle
  """
  twitterHandle: String
  """
  The total amount of Sound revenue the user has fully withdrawn
  """
  withdrawnAmount: String!
}

"""
Paginated connection of Users
"""
type UserConnection implements Connection {
  """
  Edges of current page
  """
  edges: [UserConnectionEdge!]!
  """
  Pagination helpers information
  """
  pageInfo: PageInfo!
}

"""
Edge of User Connection
"""
type UserConnectionEdge implements Edge {
  """
  Cursor to be used for pagination
  """
  cursor: String!
  """
  User node
  """
  node: User!
}

"""
Cursor connection paramaters
"""
input UserCursorConnectionArgs {
  """
  Start forwards pagination since "after" cursor
  """
  after: String
  """
  Start backwards pagination since "before" cursor
  """
  before: String
  """
  Limit the amount of nodes to be fetched, to be used with "after", with a maximum of 50 nodes.
  """
  first: NonNegativeInt
  """
  Limit the amount of nodes to be fetched, to be used with "before", with a maximum of 50 nodes.
  """
  last: NonNegativeInt
  """
  Sort the users ascending or descending relative to the user creation date
  """
  sort: SortOrder! = ASC
}

"""
Filter the NFTs of User
"""
input UserNftsConnectionFilters {
  """
  Only include Nfts that are already in a user shelf
  """
  isInShelf: Boolean
  """
  Only include Nfts from specified releases
  """
  releases: [UUID!]
}

"""
User relation entity
"""
type UserRelation implements Node {
  """
  User relation creation date
  """
  createdAt: DateTime!
  """
  User relation identifier
  """
  id: ID!
  """
  Type of user relation
  """
  relation: TypeOfRelation!
  """
  UserA of relation
  """
  userA: User!
  """
  UserB of relation
  """
  userB: User!
}

"""
Paginated user relation connection
"""
type UserRelationConnection implements Connection {
  """
  Edges of current page
  """
  edges: [UserRelationConnectionEdge!]!
  """
  Pagination helpers information
  """
  pageInfo: PageInfo!
}

"""
User Relation Node edge
"""
type UserRelationConnectionEdge implements Edge {
  """
  Cursor to be used for pagination
  """
  cursor: String!
  """
  User Relation Entity
  """
  node: UserRelation!
}

"""
Roles available for users
"""
type UserRoles {
  """
  Administrator of platform
  """
  isAdmin: Boolean!
  """
  Member of artist relations team
  """
  isArtistRelations: Boolean!
}

"""
Exchanged ammounts pretty equivalents
"""
type ValueExchangedPrettyType {
  """
  Formatted Ethereum value
  """
  eth: String!
}

"""
Represents NULL values
"""
scalar Void

"""
Union of different types of whitelist rules
"""
union WhitelistRules =
    OnlyTokenHolders
  | OnlyTopCollectors
  | RequireAnySoundHolder
  | RequireArtistSoundHolder
  | RequireTwitterVerification
